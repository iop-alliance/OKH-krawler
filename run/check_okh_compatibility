#!/usr/bin/env bash
# SPDX-FileCopyrightText: 2023 Robin Vobruba <hoijui.quaero@gmail.com>
# SPDX-License-Identifier: Unlicense
#
# See the output of "$0 -h" for details.

# Exit immediately on each error and unset variable;
# see: https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -Eeuo pipefail
# set -eu

script_path="$(readlink -f "$0")"
script_dir="$(dirname "$script_path")"
script_name="$(basename "$script_path")"
project_root=$(dirname "$script_dir")

# initial default values
APP_NAME="RDF Serialization check"
OKH_REPO_LOCAL="$HOME/Projects/OSEG/repos/OKH"
TSDC_REPO_LOCAL="$HOME/Projects/OSEG/repos/oh-tsdc"
OKH_KRAWLER_REPO_LOCAL="$project_root"
OSEG_ONT_IRI="https://w3id.org/oseg/ont"
# OKH repo local path to OWL files, paired with their prefixes
ont_prefixes=(
    "okh"
    "okhmeta"
    "okhkrawl"
    "otrl"
    "tsdc"
    "tsdcr"
)
ont_paths=(
    "src/spec/okh.ttl"
    "src/spec/okh-meta.ttl"
    "src/ont/okh-krawler.ttl"
    "src/spec/otrl.ttl"
    "oh-tsdc.ttl"
    "tsdc-req.ttl"
)
ont_local_repo=(
    "$OKH_REPO_LOCAL"
    "$OKH_REPO_LOCAL"
    "$OKH_KRAWLER_REPO_LOCAL"
    "$OKH_REPO_LOCAL"
    "$TSDC_REPO_LOCAL"
    "$TSDC_REPO_LOCAL"
)

local_repo=false

print_help() {

	echo "$APP_NAME - Compares this scrapers RDF serialization"
    echo "against the OKH ontology."
    echo "This check is very rudimentary!."
	echo
	echo "Usage:"
	echo "  $script_name [OPTION...]"
	echo "Options:"
	echo "  -l, --local"
	echo "    Uses the local ontology repo, instead of the remote/online one"
	echo "  -h, --help"
	echo "    Shows this help message and exit"
	echo "Examples:"
	echo "  $script_name"
	echo "  $script_name --help"
}

# Process command line arguments
while [[ $# -gt 0 ]]
do
	arg="$1"
	shift # $2 -> $1, $3 -> $2, ...

	case "$arg" in
		-h|--help)
			print_help
			exit 0
			;;
		-l|--local)
			local_repo=true
			;;
		*) # non-/unknown option
			>&2 echo "Unknown argument: '$arg'"
			exit 1
			;;
	esac
done

function log() {
    local level timestamp
    level="$(printf '%s' "$1" | tr '/a-z/' '/A-Z/')"
    # timestamp="$(date +'%Y-%m-%d %H:%M:%S')"
    timestamp="$(date --iso-8601=seconds)"
    shift
    >&2 echo "$timestamp $level $*"
}

build_dir="$project_root/build"
mkdir -p "$build_dir"

log info "Extracting Krawler used RDF terms ..."
for ont_prefix in "${ont_prefixes[@]}"
do
    log info "   - for $ont_prefix ..."
    ont_prefix_lower="$ont_prefix"
    ont_prefix_upper="$(printf '%s' "$ont_prefix" | tr '/a-z/' '/A-Z/')"
    output_file="$build_dir/rdf_${ont_prefix_lower}_krawler.csv"

    ( ( grep -r "$ont_prefix_upper\." \
        "$project_root/krawl/serializer/rdf_serializer.py" \
        || true ) \
        | grep -v -e '^[ \t]*#' \
        || true ) \
        | sed \
            -e 's/.*'"$ont_prefix_upper"'\.//' \
            -e 's/[^.a-zA-Z0-9].*//' \
        | sort -u \
        > "$output_file"
done

log info "Fetching OKH ontologies ..."
for ont_index in $(seq 0 "$((${#ont_prefixes[@]} - 1))")
do
    ont_path="${ont_paths[$ont_index]}"
    ont_prefix="${ont_prefixes[$ont_index]}"
    log info "   - for $ont_path ..."
    target_file="$build_dir/$(basename "$ont_path")"

    if $local_repo
    then
        _local_repo="${ont_local_repo[$ont_index]}"
        cp \
            "$_local_repo/$ont_path" \
            "$target_file"
    else
        wget \
            "$OSEG_ONT_IRI/${ont_prefix}.ttl" \
            --output-document="$target_file"
    fi
done

log info "Extracting Ontology used RDF terms ..."
for ont_index in $(seq 0 "$((${#ont_prefixes[@]} - 1))")
do
    ont_path="${ont_paths[$ont_index]}"
    ont_prefix="${ont_prefixes[$ont_index]}"
    log info "   - for $ont_prefix ..."
    ont_file="$build_dir/$(basename "$ont_path")"
    ont_prefix_lower="$ont_prefix"
    output_file="$build_dir/rdf_${ont_prefix_lower}_ontology.csv"

    grep '^'"$ont_prefix_lower"':' \
        < "$ont_file" \
        | sed -e 's/^'"$ont_prefix_lower"'://' -e 's/[ \t].*//' \
        | sort -u \
        > "$output_file"
done

log info "Comparing extracted RDF terms used ..."
has_bad=false
for ont_prefix in "${ont_prefixes[@]}"
do
    log info "   - for $ont_prefix ..."
    ont_prefix_lower="$ont_prefix"

    comm \
        -13 \
        "$build_dir/rdf_${ont_prefix_lower}_ontology.csv" \
        "$build_dir/rdf_${ont_prefix_lower}_krawler.csv" \
        > "$build_dir/rdf_${ont_prefix_lower}_bad.csv"
    bad=$(wc -l "$build_dir/rdf_${ont_prefix_lower}_bad.csv" | sed -e 's/ .*//')

    comm \
        -13 \
        "$build_dir/rdf_${ont_prefix_lower}_krawler.csv" \
        "$build_dir/rdf_${ont_prefix_lower}_ontology.csv" \
        > "$build_dir/rdf_${ont_prefix_lower}_missing.csv"
    _missing=$(wc -l "$build_dir/rdf_${ont_prefix_lower}_missing.csv" | sed -e 's/ .*//')

    if [ "$bad" -gt 0 ]
    then
        log error "Krawler uses $bad RDF elements from '$ont_prefix_lower:*' that are not in the ontology:"
        while read -r elem
        do
            log error "- $ont_prefix_lower:$elem"
        done < "$build_dir/rdf_${ont_prefix_lower}_bad.csv"
        has_bad=true
    fi
done
if $has_bad
then
    exit 88
fi

log info "done."
