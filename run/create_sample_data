#!/usr/bin/env bash
# SPDX-FileCopyrightText: 2025 Robin Vobruba <hoijui.quaero@gmail.com>
# SPDX-License-Identifier: Unlicense
#
# See the output of "$0 -h" for details.

# Exit immediately on each error and unset variable;
# see: https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -Eeuo pipefail
# set -eu

script_path="$(readlink -f "$0")"
script_dir="$(dirname "$script_path")"
script_name="$(basename "$script_path")"
project_root=$(dirname "$script_dir")

# initial default values
APP_NAME="Sample Data Extractor"

print_help() {

	echo "$APP_NAME -"
	echo "Extracts a tiny set of sample data from everything under workdir."
	echo
	echo "Usage:"
	echo "  $script_name [OPTION...]"
	echo "Options:"
	echo "  -h, --help"
	echo "    Shows this help message and exit"
	echo "Examples:"
	echo "  $script_name"
	echo "  $script_name --help"
}

# Process command line arguments
while [[ $# -gt 0 ]]
do
	arg="$1"
	shift # $2 -> $1, $3 -> $2, ...

	case "$arg" in
		-h|--help)
			print_help
			exit 0
			;;
		*) # non-/unknown option
			>&2 echo "Unknown argument: '$arg'"
			exit 1
			;;
	esac
done

function log() {
	local level timestamp
	level="$(printf '%s' "$1" | tr '/a-z/' '/A-Z/')"
	# timestamp="$(date +'%Y-%m-%d %H:%M:%S')"
	timestamp="$(date --iso-8601=seconds)"
	shift
	>&2 echo "$timestamp $level $*"
}

build_dir="$project_root/build"
src_root="workdir"
dest_root="$build_dir/data-sample"

# First time setup
# mkdir -p "$dest_root"
# git -C "$dest_root" init
# git -C "$dest_root" remote add origin "ssh://git@gitlab.opensourceecology.de:2222/verein/projekte/okh/data-sample.git"
# mkdir -p "$dest_root/RDF"
# echo -e "# OKH Tiny Sample Data-Set\n\nGenerated from the OKH-Krawler 'run/$script_name' script" > "$dest_root/README.md"

if [ -e "$dest_root" ]
then
	git -C "$dest_root" pull
else
	mkdir -p "$(dirname "$dest_root")"
	git clone "ssh://git@gitlab.opensourceecology.de:2222/verein/projekte/okh/data-sample.git" "$dest_root"
fi

# git -C "$dest_root" rm -r --force "RDF"
log info "start ..."

find "$src_root" -mindepth 1 -maxdepth 1 \
	| while read -r tech
do
	if [ "$(basename "$tech")" == "__fetcher__" ]
	then
		continue
	fi
	if [ -d "$tech" ]
	then
		# Get only the first entry
		find "$tech" -mindepth 1 -maxdepth 1 -print -quit \
			| while read -r tech_src
		do
			tech_dst="${tech_src//$src_root/"$dest_root/RDF"}"
			tech_dst_base="$(dirname "$tech_dst")"
			mkdir -p "$tech_dst_base"
			cp -r "$tech_src" "$tech_dst_base/"
		done
	fi
done

git -C "$dest_root" add --all
git -C "$dest_root" commit -m "update"
git -C "$dest_root" push

log info "done."
