#!/usr/bin/env bash
# SPDX-FileCopyrightText: 2025 Robin Vobruba <hoijui.quaero@gmail.com>
# SPDX-License-Identifier: Unlicense
#
# See the output of "$0 -h" for details.

# Exit immediately on each error and unset variable;
# see: https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -Eeuo pipefail
#set -Eeu

script_path="$(readlink -f "${BASH_SOURCE[0]}")"
# script_dir="$(dirname "$script_path")"
script_name="$(basename "$script_path")"

# initial default values
APP_NAME="Scraping Wrapper"
all_hosting_technologies=(
	"appropedia.org"
	"github.com"
	"manuscript-repos"
	"oshwa.org"
	"thingiverse.com"
)
	#"manifests-list"
hosting_technologies=()

function _print_help() {

	echo "$APP_NAME - So one does not have to remember the CLI of krawl."
	echo
	echo "Usage:"
	echo "  $script_name [OPTION...]"
	echo "Options:"
	echo "  -h, --help"
	echo "    Shows this help message and exit"
	echo "  -a, --all"
	echo "    scrapes all supported hosting technologies in series."
	echo "  --appropedia"
	echo "    scrapes appropedia.org"
	echo "  --github"
	echo "    scrapes github.com"
	echo "  --manifests-repo"
	echo "    scrapes manifests-repo (as of March 2025, that is the PubInv repo)"
	echo "  --oshwa"
	echo "    scrapes certifications.oshwa.org"
	echo "  --thingiverse"
	echo "    scrapes thingiverse.com"
	echo "Examples:"
	echo "  $script_name --help"
	echo "  $script_name --appropedia --oshwa"
	echo "  $script_name --all"
}

# Process command line arguments
while [[ $# -gt 0 ]]
do
	arg="$1"
	shift # $2 -> $1, $3 -> $2, ...

	case "$arg" in
		-a|--all)
			hosting_technologies=("${all_hosting_technologies[@]}")
			;;
		--appropedia)
			hosting_technologies+=("appropedia.org")
			;;
		--github)
			hosting_technologies+=("github.com")
			;;
		--manifests-repo)
			hosting_technologies+=("manifests-repo")
			;;
		--oshwa)
			hosting_technologies+=("oshwa.org")
			;;
		--thingiverse)
			hosting_technologies+=("thingiverse.com")
			;;
		-h|--help)
			_print_help
			exit 0
			;;
		*) # non-/unknown option
			>&2 echo "ERROR: Unknown flag: '$arg'"
			exit 1
			;;
	esac
done

poetry install

for hosting_tech in "${hosting_technologies[@]}"
do
	poetry run krawl fetch "$hosting_tech" -c config.yml -vvv
done
echo "done."
