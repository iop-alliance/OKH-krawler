#!/usr/bin/env sh
# SPDX-FileCopyrightText: 2024 Robin Vobruba <hoijui.quaero@gmail.com>
# SPDX-License-Identifier: Unlicense
#
# See the output of "$0 -h" for details.

# Exit immediately on each error and unset variable;
# see: https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
#set -Eeuo pipefail
set -eu

script_path="$(readlink -f "$0")"
script_dir="$(dirname "$script_path")"
script_name="$(basename "$script_path")"
workdir="$(dirname "$script_dir")/workdir"

# initial default values
APP_NAME="RDF Serialization check"

print_help() {

	echo "$APP_NAME - Compares this crawlers RDF serialization"
	echo "against the OKH LOSH ontology."
	echo "This check is very rudimentary!."
	echo
	echo "Usage:"
	echo "  $script_name [OPTION...]"
	echo "Options:"
	echo "  -h, --help"
	echo "    Shows this help message and exit"
	echo "Examples:"
	echo "  $script_name"
	echo "  $script_name --help"
}

# read command-line args
i=1
while [ "$i" -lt "$#" ]
do
	arg="$(eval "echo \$$i")"

	case "$arg" in
		-h|--help)
			shift "$i"
			print_help
			exit 0
			;;
		*) # non-/unknown option
			i=$((i + 1))
			;;
	esac
done

build_dir=build
mkdir -p "$build_dir"

find "$workdir" -mindepth 1 -maxdepth 1 \
	| grep -v __fetcher__ \
	| while read -r hosting_id_path
do
	hosting_id="$(basename "$hosting_id_path")"
	num_projects="$(find "$hosting_id_path" -name "meta.json" -type f \
		| wc -l)"
	echo "$hosting_id: $num_projects"
done
